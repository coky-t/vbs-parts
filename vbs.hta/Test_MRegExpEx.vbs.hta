<html>

<head>
<title>Test_MRegExpEx.vbs.hta</title>

<meta http-equiv="msthemecompatible" content="yes">

<hta:application innerborder="no" scroll="no" />

<script language="vbscript">
<!--
Option Explicit

'
' Copyright (c) 2020 Koki Takeyama
'
' Permission is hereby granted, free of charge, to any person obtaining
' a copy of this software and associated documentation files (the "Software"),
' to deal in the Software without restriction, including without limitation
' the rights to use, copy, modify, merge, publish, distribute, sublicense,
' and/or sell copies of the Software, and to permit persons to whom the
' Software is furnished to do so, subject to the following conditions:
'
' The above copyright notice and this permission notice shall be included
' in all copies or substantial portions of the Software.
'
' THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
' IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
' FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
' AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
' LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
' FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
' IN THE SOFTWARE.
'

'
' Microsoft VBScript Regular Expression 5.5
' - VBScript_RegExp_55.RegExp
'

Private RegExpObject

'
' --- RegExp ---
'

'
' GetRegExp
' - Returns a RegExp object.
'

Public Function GetRegExp()
    'Static RegExpObject
    If IsEmpty(RegExpObject) Then
        Set RegExpObject = New RegExp
    End If
    Set GetRegExp = RegExpObject
End Function

'
' === RegExp ===
'

'
' RegExp_Execute
' - Executes a regular expression search against a specified string.
'
' RegExp_Replace
' - Replaces text found in a regular expression search.
'
' RegExp_Test
' - Executes a regular expression search against a specified string
'   and returns a Boolean value that indicates if a pattern match was found.
'

'
' SourceString:
'   Required. The text string upon which the regular expression is executed.
'
' ReplaceString:
'   Required. The replacement text string.
'
' Pattern:
'   Required. Regular string expression being searched for.
'   https://docs.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/scripting-articles/f97kw5ka(v=vs.84)
'
' IgnoreCase:
'   Optional. The value is False if the search is case-sensitive,
'   True if it is not. Default is False.
'
' GlobalMatch:
'   Optional. The value is True if the search applies to the entire string,
'   False if it does not. Default is False.
'
' MultiLine:
'   Optional. The value is False if the search is single-line mode,
'   True if it is multi-line mode. Default is False.
'

Public Function RegExp_Execute( _
    SourceString, _
    Pattern, _
    IgnoreCase, _
    GlobalMatch, _
    MultiLine)
    
    On Error Resume Next
    
    With GetRegExp()
        .Pattern = Pattern
        .IgnoreCase = IgnoreCase
        .Global = GlobalMatch
        .MultiLine = MultiLine
        Set RegExp_Execute = .Execute(SourceString)
    End With
End Function

Public Function RegExp_Replace( _
    SourceString, _
    ReplaceString, _
    Pattern, _
    IgnoreCase, _
    GlobalMatch, _
    MultiLine)
    
    On Error Resume Next
    
    With GetRegExp()
        .Pattern = Pattern
        .IgnoreCase = IgnoreCase
        .Global = GlobalMatch
        .MultiLine = MultiLine
        RegExp_Replace = .Replace(SourceString, ReplaceString)
    End With
End Function

Public Function RegExp_Test( _
    SourceString, _
    Pattern, _
    IgnoreCase, _
    MultiLine)
    
    On Error Resume Next
    
    With GetRegExp()
        .Pattern = Pattern
        .IgnoreCase = IgnoreCase
        .MultiLine = MultiLine
        RegExp_Test = .Test(SourceString)
    End With
End Function

'
' === CRegExpMatches ===
'

Class CRegExpMatches
    Public Title
    Public Matches
End Class

'
' === RegExpEx ===
'

'
' RegExp_ParamsList_Execute
' RegExp_Params_Execute
' - Executes a regular expression search against a specified string.
'
' RegExp_ParamsList_Replace
' RegExp_Params_Replace
' - Replaces text found in a regular expression search.
'
' RegExp_ParamsList_Test
' RegExp_Params_Test
' - Executes a regular expression search against a specified string
'   and returns a Boolean value that indicates if a pattern match was found.
'

'
' SourceString:
'   Required. The text string upon which the regular expression is executed.
'
' ParametersListString:
'   For Execute, Test:
'     (Title)(Tab)Pattern(Tab)IgnoreCase(Tab)GlobalMatch(Tab)MultiLine(Newline)
'   For Replace:
'     ReplaceString(Tab)Pattern(Tab)IgnoreCase(Tab)GlobalMatch(Tab)MultiLine(Newline)
'
' ReplaceString:
'   Required. The replacement text string.
'
' Pattern:
'   Required. Regular string expression being searched for.
'   https://docs.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/scripting-articles/f97kw5ka(v=vs.84)
'
' IgnoreCase:
'   Optional. The value is False if the search is case-sensitive,
'   True if it is not. Default is False.
'
' GlobalMatch:
'   Optional. The value is True if the search applies to the entire string,
'   False if it does not. Default is False.
'
' MultiLine:
'   Optional. The value is False if the search is single-line mode,
'   True if it is multi-line mode. Default is False.
'

Public Function RegExp_ParamsList_Execute( _
    SourceString, _
    ParametersListString)
    
    If SourceString = "" Then Exit Function
    If ParametersListString = "" Then Exit Function
    
    Dim MatchesCollection
    Set MatchesCollection = CreateObject("Scripting.Dictionary")
    
    Dim ParamsList
    ParamsList = Split(ParametersListString, vbNewLine)
    
    Dim Index
    For Index = LBound(ParamsList) To UBound(ParamsList)
        Dim Params
        Params = CStr(ParamsList(Index))
        
        Dim RegExpMatches
        Set RegExpMatches = Nothing
        If Params <> "" Then
            Set RegExpMatches = RegExp_Params_Execute(SourceString, Params)
        End If
        
        If Not RegExpMatches Is Nothing Then
            MatchesCollection.Add MatchesCollection.Count + 1, RegExpMatches
        End If
    Next
    
    Set RegExp_ParamsList_Execute = MatchesCollection
End Function

Public Function RegExp_Params_Execute( _
    SourceString, _
    ParametersString)
    
    If SourceString = "" Then Exit Function
    If ParametersString = "" Then Exit Function
    
    Dim Params
    Params = Split(ParametersString, vbTab)
    
    Dim LB
    Dim UB
    LB = LBound(Params)
    UB = UBound(Params)
    
    Dim Title
    Dim Pattern
    Dim IgnoreCase
    Dim GlobalMatch
    Dim MultiLine
    
    Title = CStr(Params(LB))
    If LB + 1 <= UB Then Pattern = CStr(Params(LB + 1))
    If LB + 2 <= UB Then IgnoreCase = CBool(Params(LB + 2))
    If LB + 3 <= UB Then GlobalMatch = CBool(Params(LB + 3))
    If LB + 4 <= UB Then MultiLine = CBool(Params(LB + 4))
    
    Dim RegExpMatches
    Set RegExpMatches = New CRegExpMatches
    With RegExpMatches
        .Title = Title
        Set .Matches = RegExp_Execute( _
            SourceString, _
            Pattern, _
            IgnoreCase, _
            GlobalMatch, _
            MultiLine)
    End With
    
    Set RegExp_Params_Execute = RegExpMatches
End Function

Public Function RegExp_ParamsList_Replace( _
    SourceString, _
    ParametersListString)
    
    RegExp_ParamsList_Replace = SourceString
    
    If SourceString = "" Then Exit Function
    If ParametersListString = "" Then Exit Function
    
    Dim ResultString
    ResultString = SourceString
    
    Dim ParamsList
    ParamsList = Split(ParametersListString, vbNewLine)
    
    Dim Index
    For Index = LBound(ParamsList) To UBound(ParamsList)
        Dim Params
        Params = CStr(ParamsList(Index))
        ResultString = RegExp_Params_Replace(ResultString, Params)
    Next
    
    RegExp_ParamsList_Replace = ResultString
End Function

Public Function RegExp_Params_Replace( _
    SourceString, _
    ParametersString)
    
    RegExp_Params_Replace = SourceString
    
    If SourceString = "" Then Exit Function
    If ParametersString = "" Then Exit Function
    
    Dim Params
    Params = Split(ParametersString, vbTab)
    
    Dim LB
    Dim UB
    LB = LBound(Params)
    UB = UBound(Params)
    
    Dim ReplaceString
    Dim Pattern
    Dim IgnoreCase
    Dim GlobalMatch
    Dim MultiLine
    
    ReplaceString = CStr(Params(LB))
    If LB + 1 <= UB Then Pattern = CStr(Params(LB + 1))
    If LB + 2 <= UB Then IgnoreCase = CBool(Params(LB + 2))
    If LB + 3 <= UB Then GlobalMatch = CBool(Params(LB + 3))
    If LB + 4 <= UB Then MultiLine = CBool(Params(LB + 4))
    
    RegExp_Params_Replace = _
        RegExp_Replace( _
            SourceString, _
            ReplaceString, _
            Pattern, _
            IgnoreCase, _
            GlobalMatch, _
            MultiLine)
End Function

Public Function RegExp_ParamsList_Test( _
    SourceString, _
    ParametersListString)
    
    If SourceString = "" Then Exit Function
    If ParametersListString = "" Then Exit Function
    
    Dim ResultString
    
    Dim ParamsList
    ParamsList = Split(ParametersListString, vbNewLine)
    
    Dim Index
    For Index = LBound(ParamsList) To UBound(ParamsList)
        Dim Params
        Params = CStr(ParamsList(Index))
        
        Dim Result
        Result = RegExp_Params_Test(SourceString, Params)
        
        If Result <> "" Then
            ResultString = ResultString & Result & vbNewLine
        End If
    Next
    
    RegExp_ParamsList_Test = ResultString
End Function

Public Function RegExp_Params_Test( _
    SourceString, _
    ParametersString)
    
    If SourceString = "" Then Exit Function
    If ParametersString = "" Then Exit Function
    
    Dim ResultString
    
    Dim Params
    Params = Split(ParametersString, vbTab)
    
    Dim LB
    Dim UB
    LB = LBound(Params)
    UB = UBound(Params)
    
    Dim Title
    Dim Pattern
    Dim IgnoreCase
    'Dim GlobalMatch
    Dim MultiLine
    
    Title = CStr(Params(LB))
    If LB + 1 <= UB Then Pattern = CStr(Params(LB + 1))
    If LB + 2 <= UB Then IgnoreCase = CBool(Params(LB + 2))
    'If LB + 3 <= UB Then GlobalMatch = CBool(Params(LB + 3))
    If LB + 4 <= UB Then MultiLine = CBool(Params(LB + 4))
    
    RegExp_Params_Test = Title & vbTab & _
        CStr(RegExp_Test( _
            SourceString, _
            Pattern, _
            IgnoreCase, _
            MultiLine))
End Function

'
' --- Test ---
'

Sub btnTest_OnClick
    Dim SourceString
    SourceString = textareaSourceString.innerText
    If SourceString = "" Then
        MsgBox "SourceString: is blank."
        Exit Sub
    End If
    
    Dim Patterns
    Patterns = textareaPatterns.innerText
    If Patterns = "" Then
        MsgBox "Pattern: is blank."
        Exit Sub
    End If
    
    Dim Result
    Result = RegExp_ParamsList_Test(SourceString, Patterns)
    
    tdResult.innerText = Result
End Sub

Sub btnTestTrue_OnClick
    Dim SourceString
    SourceString = textareaSourceString.innerText
    If SourceString = "" Then
        MsgBox "SourceString: is blank."
        Exit Sub
    End If
    
    Dim Patterns
    Patterns = textareaPatterns.innerText
    If Patterns = "" Then
        MsgBox "Pattern: is blank."
        Exit Sub
    End If
    
    Dim ResultsList
    ResultsList = RegExp_ParamsList_Test(SourceString, Patterns)
    
    Dim Results
    Results = Split(ResultsList, vbNewLine)
    
    Dim OutputString
    Dim Index
    For Index = LBound(Results) To UBound(Results)
        If Results(Index) <> "" Then
            Dim Result
            Result = Split(Results(Index), vbTab)
            
            If CBool(Result(UBound(Result))) Then
                OutputString = OutputString & Results(Index) & vbNewLine
            End If
        End If
    Next
    
    If OutputString = "" Then
        OutputString = "None"
    End If
    
    tdResult.innerText = OutputString
End Sub

Sub btnReplace_OnClick
    Dim SourceString
    SourceString = textareaSourceString.innerText
    If SourceString = "" Then
        MsgBox "SourceString: is blank."
        Exit Sub
    End If
    
    Dim Patterns
    Patterns = textareaPatterns.innerText
    If Patterns = "" Then
        MsgBox "Pattern: is blank."
        Exit Sub
    End If
    
    Dim Result
    Result = RegExp_ParamsList_Replace(SourceString, Patterns)
    
    tdResult.innerText = Result
End Sub

Sub btnExecute_OnClick
    Dim SourceString
    SourceString = textareaSourceString.innerText
    If SourceString = "" Then
        MsgBox "SourceString: is blank."
        Exit Sub
    End If
    
    Dim Patterns
    Patterns = textareaPatterns.innerText
    If Patterns = "" Then
        MsgBox "Pattern: is blank."
        Exit Sub
    End If
    
    Dim REMCollection
    Set REMCollection = RegExp_ParamsList_Execute(SourceString, Patterns)
    
    Debug_Print_RegExpMatchesCollection REMCollection
End Sub

Private Sub Debug_Print_RegExpMatchesCollection( _
    RegExpMatchesCollection)
    
    If RegExpMatchesCollection Is Nothing Then
        tdResult.innerText = "RegExpMatchesCollection: Nothing"
    ElseIf RegExpMatchesCollection.Count = 0 Then
        tdResult.innerText = "RegExpMatchesCollectiontches: No item"
    Else
        Dim Html
        Html = ""
        Dim Index
        For Index = 1 To RegExpMatchesCollection.Count
            Dim RegExpMatches
            Set RegExpMatches = RegExpMatchesCollection.Item(Index)
            Html = Html & GetHtml_From_RegExpMatches(RegExpMatches)
        Next
        tdResult.innerHtml = Html
    End If
End Sub

Private Function GetHtml_From_RegExpMatches(RegExpMatches)
    If RegExpMatches Is Nothing Then
        GetHtml_From_RegExpMatches = _
            "<dl><dt>unknown</dt><dd>RegExpMatches: Nothing</dd></dl>"
    Else
        Dim Html
        Html = "<dl>"
        Html = Html & "<dt>" & RegExpMatches.Title & "</dt>"
        Html = Html & "<dd>"
        Html = Html & GetHtml_From_Matches(RegExpMatches.Matches)
        Html = Html & "</dd>"
        Html = Html & "</dl>"
        GetHtml_From_RegExpMatches = Html
    End If
End Function

Private Function GetHtml_From_Matches( _
    Matches)
    
    If Matches Is Nothing Then
        GetHtml_From_Matches = "Matches: Nothing"
        Exit Function
    ElseIf Matches.Count = 0 Then
        GetHtml_From_Matches = "Matches: No item"
        Exit Function
    Else
        'nop
    End If
    
    Dim Html
    Html = "<table>"
    Html = Html & "<tr>"
    Html = Html & "<th>No.</th>"
    Html = Html & "<th>FirstIndex</th>"
    Html = Html & "<th>Length</th>"
    Html = Html & "<th>Value</th>"
    
    If Matches.Item(0).Submatches Is Nothing Then
        'nop
    ElseIf Matches.Item(0).Submatches.Count = 0 Then
        'nop
    Else
        Dim SubMatchIndex
        For SubMatchIndex = 0 To Matches.Item(0).Submatches.Count - 1
            Html = Html & "<td>Sub" & CStr(SubMatchIndex + 1) & "</td>"
        Next
    End If
    
    Html = Html & "</tr>"
    
    Dim Match
    Dim MatchIndex
    For MatchIndex = 0 To Matches.Count - 1
        Set Match = Matches.Item(MatchIndex)
        Html = Html & GetHtml_From_Match(MatchIndex, Match)
    Next
    
    Html = Html & "</table>"
    
    GetHtml_From_Matches = Html
End Function

Private Function GetHtml_From_Match(MatchIndex, Match)
    Dim Html
    Html = "<tr>"
    Html = Html & "<td>" & CStr(MatchIndex) & "</td>"
    Html = Html & "<td>" & CStr(Match.FirstIndex) & "</td>"
    Html = Html & "<td>" & CStr(Match.Length) & "</td>"
    Html = Html & "<td>" & Match.Value & "</td>"
    Html = Html & GetHtml_From_SubMatches(Match.SubMatches)
    Html = Html & "</tr>"
    GetHtml_From_Match = Html
End Function

Private Function GetHtml_From_SubMatches( _
    SubMatches)
    
    If SubMatches Is Nothing Then
        Exit Function
    ElseIf SubMatches.Count = 0 Then
        Exit Function
    Else
        'nop
    End If
    
    Dim Html
    
    Dim Index
    Dim SubMatch
    For Index = 0 To SubMatches.Count - 1
        SubMatch = SubMatches.Item(Index)
        Html = Html & "<td>" & SubMatch & "</td>"
    Next
    
    GetHtml_From_SubMatches = Html
End Function
-->
</script>

</head>

<body style="margin:0">

<table width="100%">

<colgroup>
<col width="100pt"></col>
<col></col>
</colgroup>

<tr>
<td>SourceString:</td>
<td><textarea id="textareaSourceString" rows="10" cols="50" style="width:100%"></textarea></td>
</tr>

<tr>
<td>Patterns:</td>
<td>Text, Execute: Title(Tab)Pattern(Tab)IgnoreCase(Tab)GlobalMatch(Tab)MultiLine(Newline)</td>
</tr>

<tr>
<td>Patterns:</td>
<td>Replace: ReplaceString(Tab)Pattern(Tab)IgnoreCase(Tab)GlobalMatch(Tab)MultiLine(Newline)</td>
</tr>

<tr>
<td>Patterns:</td>
<td><textarea id="textareaPatterns" rows="10" cols="50" style="width:100%"></textarea></td>
</tr>

<tr>
<td></td>
<td>
<button id="btnTest">Test (All)</button>
<button id="btnTestTrue">Test (True only)</button>
<button id="btnReplace">Replace</button>
<button id="btnExecute">Execute</button>
</td>
</tr>

<tr>
<td>Result:</td>
<td id="tdResult"></td>
</tr>

</table>

</body>

</html>
